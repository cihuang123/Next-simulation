#ifndef __forces_HH__
#define __forces_HH__
/********************************* TRICK HEADER *******************************
PURPOSE:
      (Describe the forces Module Variables and Algorithm)
LIBRARY DEPENDENCY:
      ((../src/Forces.cpp))
      ((../../math/src/nrutil.cpp))
PROGRAMMERS:
      ((Lai Jun Xu))
*******************************************************************************/
#include <armadillo>
#include <functional>
#include "Module.hh"
#include "aux.hh"
#include "global_constants.hh"
#include "matrix/utility.hh"

class Forces : public Dynamics {
  TRICK_INTERFACE(Forces);

 public:
  Forces() {}

  Forces(Data_exchang &input);
  Forces(const Forces &other);

  Forces &operator=(const Forces &other);

  virtual void init();
  virtual void algorithm(double int_step){};
  void collect_forces_and_propagate();
  void set_reference_point(double refp);
  void set_DOF(int ndof);
  void set_aero_flag(unsigned int in);

 private:

  void default_data();

  arma::mat33 TMX(double ang);
  arma::mat33 TMY(double ang);
  arma::mat33 TMZ(double ang);

  void gamma_beta();
  void Gravity_Q();
  void AeroDynamics_Q();
  void calculate_I1();
  void funcv(int n, double *x, double *ff);
  void broydn(double x[], int n, int *check);
  void rsolv(double **a, int n, double d[], double b[]);
  void fdjac(int n, double x[], double fvec[], double **df);
  double f_min(double x[]);
  void lnsrch(int n, double xold[], double fold, double g[], double p[],
              double x[], double *f, double stpmax, int *check);
  void qrdcmp(double **a, int n, double *c, double *d, int *sing);
  void qrupdt(double **r, double **qt, int n, double u[], double v[]);
  void rotate(double **r, double **qt, int n, int i, double a, double b);

  /* Generating Outputs */
  VECTOR(FAPB, 3); /* *o (N)      Aerodynamic and propulsion forces in body axes */

  VECTOR(FAP, 3); /* *o (N)      Aerodynamic force in body axes */

  VECTOR(FMB, 3); /* *o (N*m)    Aerodynamic and propulsion moment in body axes */

  VECTOR(FMAB, 3); /* *o (N*m)    Aerodynamic and propulsion moment in body axes */

  VECTOR(Q_G, 6); /* *o (--)     External force generated by gravity */

  VECTOR(Q_Aero, 6); /* *o (--)  External force generated by aerodynamics */

  VECTOR(rhoC_1, 3); /* *o  (m)  Level arm from reference ponit to CG */

  MATRIX(I1, 3, 3); /* *o (kg*m2)  MOI of vehicle */

  VECTOR(ddrP_1, 3); /* *o  (m/s2)  Vehicle acceleration */

  VECTOR(ddang_1, 3); /* *o  (r/s2)  Vehicle angular acceleration */

  VECTOR(dang_1, 3); /* *o  (r/s)   Vehicle angular rate */

  VECTOR(ddrhoC_1, 3); /* *o  (m/s2)  Centrifugal acceleration and tangential
                          acceleration term */

  VECTOR(p_b1_ga, 3); /* *o (--)   General dynamics equations 1st DoF to 3rd DoF */

  VECTOR(p_b1_be, 3); /* *o (--)   General dynamics equations 4th DoF to 6th DoF */

  VECTOR(f, 6); /* *o  (--)  Summation of external force & internal force */

  VECTOR(gamma_b1_q1, 3); /* *o (--)  Vehicle's 1st DoF velocity coefficient */

  VECTOR(gamma_b1_q2, 3); /* *o (--)  Vehicle's 2nd DoF velocity coefficient */

  VECTOR(gamma_b1_q3, 3); /* *o (--)  Vehicle's 3rd DoF velocity coefficient */

  VECTOR(beta_b1_q4, 3); /* *o (--)  Vehicle's 4th DoF angular velocity coefficient */

  VECTOR(beta_b1_q5, 3); /* *o (--)  Vehicle's 5th DoF angular velocity coefficient */

  VECTOR(beta_b1_q6, 3); /* *o (--)  Vehicle's 6th DoF angular velocity coefficient */

  double xp; /* *o (m) Reference point  */

  int its;                /* *o (--) Number of iterations */
  int DOF;                /* *o (--)  Number of Degree of Freedom */
  unsigned int Aero_flag; /* *o (-)  Aerodynamics flag */
};

#endif  // __forces_HH__
